#include "SFNetwork.h"
#include "RK4S.h"

#include <iostream>
#include <vector>
#include <algorithm>
#include <ctime>
#include <functional>

using namespace std;


double measureRuntime(const function<void()> f) {
	clock_t start(clock());
	f();
	return (clock() - start) / (double)CLOCKS_PER_SEC;
}


int main(int argc, char* argv) {
	srand(clock());
	double runtime = measureRuntime([]()->void {
		vector<double(*)(double)> f_real = {
			[](double t)->double { return t + .5 * exp(-t) + 1.5 * exp(t) - 1; },
			[](double t)->double { return -t - .5 * exp(-t) + 1.5 * exp(t) + 1; }
		};
		vector<RK4SFunc> f_dif = {
			[](int ind, double t, const vector<double>& x)->double { return x[1] + t; },
			[](int ind, double t, const vector<double>& x)->double { return x[0] - t; }
		};
		double t_init = 0;
		vector<double> v_init = { 1, 2 };
		double t_target = 50;
		double t_step = 0.01;
		RK4SResult res = RK4S::Solve(f_dif, t_init, v_init, t_target, t_step);
		cout << "Final time: " << res.time << endl;
		for (int i = 0; i < res.values.size(); i++)
			cout << res.values[i] << "\t" << f_real[i](res.time) << "\t" << res.values[i] - f_real[i](res.time) << endl;
	});
	cout << endl << "Runtime: " << runtime;
	system("pause");
	return 0;
}